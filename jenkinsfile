pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'test-app'
        DOCKERFILE_PATH = './dockerfile'
        NGINX_CONF_PATH = './nginx.conf'
        DIST_PATH = './dist/test-name'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the GitHub repository
                git url: 'https://github.com/govardhan-srinivas/jenkins-ci-cd.git', branch: 'main'
            }
        }

        stage('Install & Build Angular ') {
            agent {
                docker {
                    image 'node:22.9.0'
                    args '-u root' // Run as root to avoid permission issues
                }
            }

            steps {
                script {
                    // Create a directory for global npm packages
                    sh 'mkdir -p /home/node/.npm-global'
                    
                    // Configure npm to use the new directory
                    sh 'npm config set prefix /home/node/.npm-global'
                    
                    // Install Angular CLI globally
                    sh 'npm install -g @angular/cli'
                    
                    // Verify installation
                    sh 'npm list -g --depth=0' // List global packages to confirm installation
                    // Update bash path
                    sh '''
                    export PATH=/home/node/.npm-global/bin:$PATH
                    npm install
                    ng build # Build the application
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            agent {
                docker {
                    image 'docker:latest'
                    args '-u root --privileged'
                }
            }

            steps {
                // Build the Docker image
                sh "docker build -t ${DOCKER_IMAGE} -f ${DOCKERFILE_PATH} ."
                // Stop and remove any existing container
                sh "docker rm -f ${DOCKER_IMAGE} || true"
                // Run the Docker container
                sh "docker run -d -p 80:80 --name ${DOCKER_IMAGE} ${DOCKER_IMAGE}"
            }
        }
    }
}